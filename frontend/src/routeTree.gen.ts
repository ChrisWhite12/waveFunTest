/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TilebuilderImport } from './routes/tilebuilder'
import { Route as GeneratorImport } from './routes/generator'
import { Route as RegisterImport } from './routes/Register'
import { Route as LoginImport } from './routes/Login'
import { Route as TilesocketListImport } from './routes/tilesocket/list'
import { Route as TilesocketCreateImport } from './routes/tilesocket/create'
import { Route as TilesetCreateImport } from './routes/tileset/create'
import { Route as TilegroupListImport } from './routes/tilegroup/list'
import { Route as TilegroupDetailIdImport } from './routes/tilegroup/detail.$id'

// Create/Update Routes

const TilebuilderRoute = TilebuilderImport.update({
  id: '/tilebuilder',
  path: '/tilebuilder',
  getParentRoute: () => rootRoute,
} as any)

const GeneratorRoute = GeneratorImport.update({
  id: '/generator',
  path: '/generator',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/Register',
  path: '/Register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/Login',
  path: '/Login',
  getParentRoute: () => rootRoute,
} as any)

const TilesocketListRoute = TilesocketListImport.update({
  id: '/tilesocket/list',
  path: '/tilesocket/list',
  getParentRoute: () => rootRoute,
} as any)

const TilesocketCreateRoute = TilesocketCreateImport.update({
  id: '/tilesocket/create',
  path: '/tilesocket/create',
  getParentRoute: () => rootRoute,
} as any)

const TilesetCreateRoute = TilesetCreateImport.update({
  id: '/tileset/create',
  path: '/tileset/create',
  getParentRoute: () => rootRoute,
} as any)

const TilegroupListRoute = TilegroupListImport.update({
  id: '/tilegroup/list',
  path: '/tilegroup/list',
  getParentRoute: () => rootRoute,
} as any)

const TilegroupDetailIdRoute = TilegroupDetailIdImport.update({
  id: '/tilegroup/detail/$id',
  path: '/tilegroup/detail/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Login': {
      id: '/Login'
      path: '/Login'
      fullPath: '/Login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/Register': {
      id: '/Register'
      path: '/Register'
      fullPath: '/Register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/generator': {
      id: '/generator'
      path: '/generator'
      fullPath: '/generator'
      preLoaderRoute: typeof GeneratorImport
      parentRoute: typeof rootRoute
    }
    '/tilebuilder': {
      id: '/tilebuilder'
      path: '/tilebuilder'
      fullPath: '/tilebuilder'
      preLoaderRoute: typeof TilebuilderImport
      parentRoute: typeof rootRoute
    }
    '/tilegroup/list': {
      id: '/tilegroup/list'
      path: '/tilegroup/list'
      fullPath: '/tilegroup/list'
      preLoaderRoute: typeof TilegroupListImport
      parentRoute: typeof rootRoute
    }
    '/tileset/create': {
      id: '/tileset/create'
      path: '/tileset/create'
      fullPath: '/tileset/create'
      preLoaderRoute: typeof TilesetCreateImport
      parentRoute: typeof rootRoute
    }
    '/tilesocket/create': {
      id: '/tilesocket/create'
      path: '/tilesocket/create'
      fullPath: '/tilesocket/create'
      preLoaderRoute: typeof TilesocketCreateImport
      parentRoute: typeof rootRoute
    }
    '/tilesocket/list': {
      id: '/tilesocket/list'
      path: '/tilesocket/list'
      fullPath: '/tilesocket/list'
      preLoaderRoute: typeof TilesocketListImport
      parentRoute: typeof rootRoute
    }
    '/tilegroup/detail/$id': {
      id: '/tilegroup/detail/$id'
      path: '/tilegroup/detail/$id'
      fullPath: '/tilegroup/detail/$id'
      preLoaderRoute: typeof TilegroupDetailIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/Login': typeof LoginRoute
  '/Register': typeof RegisterRoute
  '/generator': typeof GeneratorRoute
  '/tilebuilder': typeof TilebuilderRoute
  '/tilegroup/list': typeof TilegroupListRoute
  '/tileset/create': typeof TilesetCreateRoute
  '/tilesocket/create': typeof TilesocketCreateRoute
  '/tilesocket/list': typeof TilesocketListRoute
  '/tilegroup/detail/$id': typeof TilegroupDetailIdRoute
}

export interface FileRoutesByTo {
  '/Login': typeof LoginRoute
  '/Register': typeof RegisterRoute
  '/generator': typeof GeneratorRoute
  '/tilebuilder': typeof TilebuilderRoute
  '/tilegroup/list': typeof TilegroupListRoute
  '/tileset/create': typeof TilesetCreateRoute
  '/tilesocket/create': typeof TilesocketCreateRoute
  '/tilesocket/list': typeof TilesocketListRoute
  '/tilegroup/detail/$id': typeof TilegroupDetailIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/Login': typeof LoginRoute
  '/Register': typeof RegisterRoute
  '/generator': typeof GeneratorRoute
  '/tilebuilder': typeof TilebuilderRoute
  '/tilegroup/list': typeof TilegroupListRoute
  '/tileset/create': typeof TilesetCreateRoute
  '/tilesocket/create': typeof TilesocketCreateRoute
  '/tilesocket/list': typeof TilesocketListRoute
  '/tilegroup/detail/$id': typeof TilegroupDetailIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/Login'
    | '/Register'
    | '/generator'
    | '/tilebuilder'
    | '/tilegroup/list'
    | '/tileset/create'
    | '/tilesocket/create'
    | '/tilesocket/list'
    | '/tilegroup/detail/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/Login'
    | '/Register'
    | '/generator'
    | '/tilebuilder'
    | '/tilegroup/list'
    | '/tileset/create'
    | '/tilesocket/create'
    | '/tilesocket/list'
    | '/tilegroup/detail/$id'
  id:
    | '__root__'
    | '/Login'
    | '/Register'
    | '/generator'
    | '/tilebuilder'
    | '/tilegroup/list'
    | '/tileset/create'
    | '/tilesocket/create'
    | '/tilesocket/list'
    | '/tilegroup/detail/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  GeneratorRoute: typeof GeneratorRoute
  TilebuilderRoute: typeof TilebuilderRoute
  TilegroupListRoute: typeof TilegroupListRoute
  TilesetCreateRoute: typeof TilesetCreateRoute
  TilesocketCreateRoute: typeof TilesocketCreateRoute
  TilesocketListRoute: typeof TilesocketListRoute
  TilegroupDetailIdRoute: typeof TilegroupDetailIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  GeneratorRoute: GeneratorRoute,
  TilebuilderRoute: TilebuilderRoute,
  TilegroupListRoute: TilegroupListRoute,
  TilesetCreateRoute: TilesetCreateRoute,
  TilesocketCreateRoute: TilesocketCreateRoute,
  TilesocketListRoute: TilesocketListRoute,
  TilegroupDetailIdRoute: TilegroupDetailIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/Login",
        "/Register",
        "/generator",
        "/tilebuilder",
        "/tilegroup/list",
        "/tileset/create",
        "/tilesocket/create",
        "/tilesocket/list",
        "/tilegroup/detail/$id"
      ]
    },
    "/Login": {
      "filePath": "Login.jsx"
    },
    "/Register": {
      "filePath": "Register.jsx"
    },
    "/generator": {
      "filePath": "generator.tsx"
    },
    "/tilebuilder": {
      "filePath": "tilebuilder.tsx"
    },
    "/tilegroup/list": {
      "filePath": "tilegroup/list.tsx"
    },
    "/tileset/create": {
      "filePath": "tileset/create.tsx"
    },
    "/tilesocket/create": {
      "filePath": "tilesocket/create.tsx"
    },
    "/tilesocket/list": {
      "filePath": "tilesocket/list.tsx"
    },
    "/tilegroup/detail/$id": {
      "filePath": "tilegroup/detail.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
